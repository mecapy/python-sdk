version: '3'

# Taskfile for go-task (https://taskfile.dev)
# Provides common developer workflows for this Python SDK project.

vars:
  SDK_MODULE: mecapy

# Load environment from local files when present
dotenv: [ "dev/env.local" ]

tasks:
  default:
    desc: "Show available tasks"
    cmds:
      - task --list

  check:
    desc: "Run all quality checks (lint with ruff, typecheck with mypy)"
    deps: [ install ]
    cmds:
      - uv run ruff check .
      - uv run mypy {{.SDK_MODULE}}

  format:
    desc: "Format code with ruff and fix check"
    deps: [ install ]
    cmds:
      - uv run ruff format .
      - uv run ruff check --fix .

  install:
    desc: "Install project dependencies (uses uv if available, falls back to pip)"
    cmds:
      - |
        if command -v uv >/dev/null 2>&1; then
          echo "Using uv to sync dependencies..."
          uv sync --group dev
        else
          echo "uv not found, using pip (editable + dev extras)..."
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
        fi

  test:
    desc: "Run all batch tests"
    deps: [ install, test:unit ]


  test:unit:
    desc: "Run unit tests only"
    deps: [ install ]
    cmds:
      - uv run pytest -m unit

  test:interactive:
    desc: "Run interactive tests only"
    deps: [ install ]
    cmds:
      - uv run pytest -m interactive

  test:not_production:
    desc: "Run all tests except production"
    deps: [ install ]
    cmds:
      - uv run pytest -m "not production"

  build:
    desc: "Build wheel and sdist using hatchling (via uv if available)"
    deps: [ install ]
    cmds:
      - uv build

  clean:
    desc: "Clean build, cache and test artifacts"
    cmds:
      - rm -rf dist build *.egg-info .mypy_cache .ruff_cache .pytest_cache .coverage coverage_html htmlcov coverage.xml

  # Pre-commit hooks
  precommit:install:
    desc: "Install pre-commit hooks"
    deps: [ install ]
    cmds:
      - uv run pre-commit install

  precommit:run:
    desc: "Run pre-commit hooks on all files"
    deps: [ install ]
    cmds:
      - uv run pre-commit run --all-files

  # Package publication helpers
  publish:test:
    desc: "Publish package to TestPyPI"
    deps: [ build ]
    cmds:
      - uv run twine upload --repository testpypi dist/*

  publish:prod:
    desc: "Publish package to PyPI (production)"
    deps: [ build ]
    cmds:
      - uv run twine upload dist/*

  # Environment initialization
  init:
    desc: "Initialize development environment with uv and Python"
    cmds:
      - |
        echo "🚀 Initializing development environment..."
        if ! command -v uv >/dev/null 2>&1; then
          echo "Installing uv..."
          curl -LsSf https://astral.sh/uv/install.sh | sh
          export PATH="$HOME/.cargo/bin:$PATH"
        fi
        echo "Using Python version from .python-version file..."
        uv python install $(cat .python-version)
        echo "Creating virtual environment..."
        uv venv --python $(cat .python-version)
        echo "Installing dependencies..."
        uv sync --group dev
        echo "✅ Environment initialized successfully!"

  # Version management
  version:
    desc: "Show current version information"
    cmds:
      - |
        echo "📦 Version Information:"
        echo "===================="

        # Check git status
        if ! git diff-index --quiet HEAD -- 2>/dev/null; then
          echo "⚠️  Working directory has uncommitted changes"
          GIT_STATUS="dirty"
        else
          echo "✅ Working directory is clean"
          GIT_STATUS="clean"
        fi
        echo ""

        # Get git tag version
        if git describe --tags --abbrev=0 >/dev/null 2>&1; then
          LATEST_TAG=$(git describe --tags --abbrev=0 | sed 's/^v//')
          echo "🏷️  Latest git tag: $LATEST_TAG"

          # Show git describe for more context
          GIT_DESCRIBE=$(git describe --tags --dirty 2>/dev/null || echo "unknown")
          echo "📋 Git describe: $GIT_DESCRIBE"
        else
          echo "🏷️  Latest git tag: No tags found"
        fi

        # Get installed package version
        echo -n "📦 Installed package: "
        INSTALLED_VERSION=$(uv run python -c "
        try:
            import importlib.metadata
            print(importlib.metadata.version('{{.SDK_MODULE}}-sdk'))
        except Exception as e:
            print('Not installed or error:', str(e))
        " 2>/dev/null)
        echo "$INSTALLED_VERSION"

        # Explain version behavior
        if [ "$GIT_STATUS" = "dirty" ]; then
          echo ""
          echo "💡 Note: Installed package shows dev version because working directory has uncommitted changes."
          echo "   To get tag version, commit changes and run 'task version:sync'"
        fi

        # Get build version (if dist exists)
        if [ -d "dist" ] && [ "$(ls -A dist 2>/dev/null)" ]; then
          BUILT_VERSION=$(ls dist/*.whl 2>/dev/null | head -1 | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' | head -1)
          if [ -n "$BUILT_VERSION" ]; then
            echo "🔨 Last built: $BUILT_VERSION"
          fi
        fi

  version:reset:
    desc: "Force complete version reset (clears all caches and rebuilds)"
    cmds:
      - |
        echo "🧹 Performing complete version reset..."
        echo "🗑️  Cleaning build artifacts and caches..."
        rm -rf build/ dist/ *.egg-info/ .eggs/
        echo "🗑️  Uninstalling current package..."
        uv pip uninstall mecapy-sdk --quiet || true
        echo "🔄 Reinstalling with complete rebuild..."
        uv sync --group dev --reinstall
        echo "✅ Version completely reset and synchronized!"

  version:status:
    desc: "Show git status and version info"
    cmds:
      - |
        echo "📋 Git Status:"
        echo "=============="
        git status --short
        echo ""
        if ! git diff-index --quiet HEAD -- 2>/dev/null; then
          echo "💡 Tip: Commit changes to get clean tag version: 'git add . && git commit -m \"Update files\"'"
        else
          echo "✅ Working directory is clean - package version will match git tag"
        fi

  version:set:
    desc: "Set version tag, update dev environment, and build package"
    vars:
      VERSION: '{{.VERSION}}'
    cmds:
      - |
        if [ -z "{{.VERSION}}" ]; then
          echo "❌ Please provide VERSION: task version:set VERSION=0.1.0"
          exit 1
        fi

        echo "🏷️  Setting version {{.VERSION}}..."
        git tag -a "v{{.VERSION}}" -m "Release version {{.VERSION}}"
        echo "✅ Version {{.VERSION}} tagged successfully!"

        echo ""
        echo "🔄 Updating development environment..."
        task version:reset

        echo ""
        echo "🔨 Building package with new version..."
        task build

        echo ""
        echo "📋 Final version information:"
        task version

        echo ""
        echo "🎉 Release {{.VERSION}} is ready!"
        echo "📌 Next steps:"
        echo "   1. Push the tag: git push origin v{{.VERSION}}"
        echo "   2. Publish to PyPI: task publish:prod"

  # Lock file management
  lock:
    desc: "Update lock file after dependency changes"
    cmds:
      - uv lock
      - echo "⚠️  Don't forget to commit uv.lock with your changes!"
