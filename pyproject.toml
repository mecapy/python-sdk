[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[project]
name = "mecapy-sdk"
dynamic = ["version"]
description = "Python SDK for MecaPy API"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Jocelyn LOPEZ", email = "jocelyn.lopez@mecapy.com"}
]
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "httpx>=0.25.0",
    "pydantic>=2.4.0",
    "python-dotenv>=1.0.0",
    "requests>=2.32.5",
    "keyring>=24.0.0",
    "authlib>=1.6.4",
    "pydantic-settings>=2.10.1",
    "pytest-asyncio>=1.2.0",
]

[dependency-groups]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-httpx>=0.21.0",
    "pytest-cov>=4.0.0",
    "coverage[toml]>=7.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "ty>=0.0.1a21",
    "pre-commit>=3.4.0",
    # Type stubs for mypy
    "types-requests>=2.31.0",
]

[project.urls]
Homepage = "https://github.com/mecapy/python-sdk"
Repository = "https://github.com/mecapy/python-sdk"
Issues = "https://github.com/mecapy/python-sdk/issues"
Documentation = "https://mecapy.github.io/python-sdk"

[tool.hatch.build.targets.wheel]
packages = ["mecapy"]

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.uv-dynamic-versioning]
fallback-version = "0.0.0"
# Force version recalculation from git
dirty = true

# =============================================================================
#                                   PyTest
# =============================================================================
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-v --tb=short --strict-markers --cov=mecapy --cov-report=xml --cov-report=html --cov-report=term-missing"
asyncio_mode = "auto"
markers = [
    "unit: Unit tests (isolated, mocked dependencies)",
    "interactive: Interactive tests (may require user interaction or external services)",
    "integration: Integration tests (require running services)",
    "production: Production tests (run against live services)",
    "slow: Slow running tests",
]
filterwarnings = [
    # Ignore RuntimeWarnings from unawaited coroutines in AsyncMock
    "ignore::RuntimeWarning:.*asyncio.*",
    "ignore::RuntimeWarning:.*mock.*",
    "ignore:coroutine.*was never awaited:RuntimeWarning",
]

# =============================================================================
#                                   Coverage
# =============================================================================
[tool.coverage.run]
source = ["mecapy"]
omit = [
    "tests/*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "coverage_html"

# =============================================================================
#                                   Ruff
# =============================================================================
[tool.ruff]
line-length = 120
indent-width = 4
target-version = "py313"
exclude = ["tests", ".venv"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"
docstring-code-format = true

[tool.ruff.lint]
select = [
    "E", # Erreurs
    "W", # Warnings (avertissements)
    "F", # Fonctionnalité
    "I", # Isort
    "C", # Complexité
    "B", # Bugs
    "D", # Docstrings
    "R", # Refactoring
    "UP", # Pyupgrade
    "TRY", # Prevent Exception Handling AntiPatterns
    "C4", # flake8-comprehensions
    "DTZ",  # ban the usage of unsafe naive datetime class

    #    "FAST", # FastAPI specific
    "NPY", # Numpy specific
    "PD", # Panda
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.mccabe]
max-complexity = 5

# =============================================================================
#                                   MyPy
# =============================================================================
[tool.mypy]
python_version = "3.13"
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
show_error_codes = true

# Configuration par défaut (souple)
disallow_untyped_defs = false
check_untyped_defs = false
disallow_untyped_calls = false
disallow_incomplete_defs = false
warn_return_any = false
no_implicit_optional = false
allow_untyped_globals = true

# Plus strict uniquement pour ton code applicatif
[[tool.mypy.overrides]]
module = "app.*"
disallow_untyped_defs = true
check_untyped_defs = true
# =============================================================================
#                                    Ty
# =============================================================================
[tool.ty]
# Configuration stricte pour ty (équivalente au mode strict de mypy)
# Documentation officielle : https://docs.astral.sh/ty/

[tool.ty.environment]
# Version Python cible (équivalent à python_version de mypy)
python-version = "3.13"

[tool.ty.terminal]
# Traiter les avertissements comme des erreurs (équivalent à warn_error de mypy)
error-on-warning = true

[tool.ty.rules]
# Configuration des règles pour un mode strict
# Équivalent aux options strictes de mypy
possibly-unresolved-reference = "error"

# Configuration pour les sources principales avec strictesse maximale
[[tool.ty.overrides]]
include = ["mecapy/**"]

[tool.ty.overrides.rules]
possibly-unresolved-reference = "error"

